import{g as E,a as y,e as F}from"./index-COaxREvt.js";const b=10;function O(){const M=E(),f=F();function w(t,e,o){if(!t)return{totalTokens:0,combinationCount:1,perCallAverage:0};let n=t;const i=/\{\{?\s*(\w+)\s*\}?\}/g,a=new Set;n=n.replace(i,(s,u)=>(a.add(u),""));const c=f.estimateTokens(n),p=new Map,_=s=>(p.has(s)||p.set(s,f.estimateTokens(s)),p.get(s));let m=1;const T=new Map;for(const[s,u]of Object.entries(e)){if(!a.has(s))continue;let r=[];if(u.snapshot?.items)r=u.snapshot.items.map(l=>l.value||"");else if(u.type==="value"&&u.values)r=u.values;else if(u.type==="list"&&u.listId&&o){const l=o.find(x=>x.id===u.listId);l&&(l.category==="simple"?r=l.values||[]:l.category==="attributed"&&(r=l.items?.map(x=>x.value)||[]))}if(r.length>0){m*=r.length;const l=r.reduce((x,L)=>x+_(L),0);T.set(s,{tokenSum:l,valueCount:r.length})}}let $=0;for(const[,s]of T){const u=m/s.valueCount;$+=s.tokenSum*u}const v=c*m+$;return{totalTokens:Math.ceil(v),combinationCount:m,perCallAverage:m>0?Math.ceil(v/m):0}}function S(t){return t?f.estimateTokens(t):0}function g(t,e,o){const n=M.getOutputTokenLimit(t,e,o);if(!n)return y.warn("No output token limit found for model",{provider:t,modelId:e}),{min:-1,max:-1,expected:-1};const i=["max_tokens","max_completion_tokens","max_output_tokens","num_predict","maxTokens"];let a=0;for(const c of i)if(o[c]!==void 0){a=o[c];break}return a||(a=n),{min:b,max:n,expected:Math.min(a,n)}}function I(t,e,o,n={}){const i=e>0?t/e:0,a=h(i,o,n);return C(a,e)}function h(t,e,o={}){if(!e)return k();const n=g(e.provider,e.modelId,o);if(n.expected===-1)return{tokens:{input:t,output:{min:-1,max:-1,expected:-1}},cost:{input:0,output:{min:-1,max:-1,expected:-1},total:{min:-1,max:-1,expected:-1}},meta:{hasValidCost:!1,isLocalModel:e.provider.includes("ollama")||e.provider==="deterministic",confidence:"low",provider:e.provider,modelId:e.modelId}};const i=e.capabilities?.inputCostPerToken||0,a=e.capabilities?.outputCostPerToken||0,c=t*i;let p="low";return i>0&&a>0&&(n.expected>0?p="high":p="medium"),{tokens:{input:t,output:n},cost:{input:c,output:{min:n.min*a,max:n.max*a,expected:n.expected*a},total:{min:c+n.min*a,max:c+n.max*a,expected:c+n.expected*a}},meta:{hasValidCost:i>0||a>0,isLocalModel:e.provider.includes("ollama")||e.provider==="deterministic",confidence:p,provider:e.provider,modelId:e.modelId}}}function P(t,e="range"){if(t.cost.total.expected===-1)return"Unable to estimate";if(t.meta.isLocalModel)return"Free (local)";if(!t.meta.hasValidCost)return"No pricing data";if(t.cost.total.max===0)return"Free";switch(e){case"compact":return d(t.cost.total.expected);case"range":const o=d(t.cost.total.min),n=d(t.cost.total.max),i=d(t.cost.total.expected);return Math.abs(t.cost.total.max-t.cost.total.min)<1e-4?i:`~${i} (${o}-${n})`;case"detailed":const a=`${t.tokens.input} input`,c=`${t.tokens.output.min}-${t.tokens.output.max} output`,p=`${d(t.cost.total.min)}-${d(t.cost.total.max)}`;return`${a} + ${c} tokens: ${p}`;case"tokens":return`${t.tokens.input} + ${t.tokens.output.min}-${t.tokens.output.max} tokens`}}function d(t){if(t===0)return"$0.00";if(t<.01){let e=2,o=t;for(;o<.1;)o*=10,e++;return`$${t.toFixed(e)}`}return t<1?`$${t.toFixed(3)}`:t<10?`$${t.toFixed(2)}`:t<100?`$${t.toFixed(1)}`:`$${Math.round(t).toLocaleString()}`}function V(t){return t.length===0?k():t.reduce((e,o)=>({tokens:{input:e.tokens.input+o.tokens.input,output:{min:e.tokens.output.min+o.tokens.output.min,max:e.tokens.output.max+o.tokens.output.max,expected:e.tokens.output.expected+o.tokens.output.expected}},cost:{input:e.cost.input+o.cost.input,output:{min:e.cost.output.min+o.cost.output.min,max:e.cost.output.max+o.cost.output.max,expected:e.cost.output.expected+o.cost.output.expected},total:{min:e.cost.total.min+o.cost.total.min,max:e.cost.total.max+o.cost.total.max,expected:e.cost.total.expected+o.cost.total.expected}},meta:{hasValidCost:o.meta.hasValidCost||e.meta.hasValidCost,isLocalModel:o.meta.isLocalModel&&e.meta.isLocalModel,confidence:o.meta.confidence==="low"?"low":e.meta.confidence,provider:"multiple",modelId:"multiple"}}),k())}function C(t,e){return{tokens:{input:t.tokens.input*e,output:{min:t.tokens.output.min*e,max:t.tokens.output.max*e,expected:t.tokens.output.expected*e}},cost:{input:t.cost.input*e,output:{min:t.cost.output.min*e,max:t.cost.output.max*e,expected:t.cost.output.expected*e},total:{min:t.cost.total.min*e,max:t.cost.total.max*e,expected:t.cost.total.expected*e}},meta:t.meta}}function k(){return{tokens:{input:0,output:{min:0,max:0,expected:0}},cost:{input:0,output:{min:0,max:0,expected:0},total:{min:0,max:0,expected:0}},meta:{hasValidCost:!1,isLocalModel:!1,confidence:"low",provider:"",modelId:""}}}return{calculateTemplateTokens:w,calculatePromptTokens:S,getOutputTokenRange:g,estimateCost:h,estimateTotalCost:I,formatCost:P,formatSingleCost:d,sumEstimates:V,multiplyEstimate:C,createEmptyEstimate:k,MIN_OUTPUT_TOKENS:b}}export{O as u};

var R=Object.defineProperty;var $=(T,e,r)=>e in T?R(T,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):T[e]=r;var u=(T,e,r)=>$(T,typeof e!="symbol"?e+"":e,r);import{a as t,d as v}from"./index--_z_T8lH.js";import{u as b}from"./execution-control-v4-BCEB5RKd.js";import{s as C,c as y}from"./vue-vendor-DPw1dQYc.js";class V{constructor(){u(this,"apiCalls",C([]));u(this,"currentTrialId",C(null));u(this,"executionProgress",C(null));u(this,"isStreaming",C(!1));u(this,"activeTab",C("tasks"));u(this,"_progressCache",null);u(this,"_progressDirty",!0);u(this,"_progressLastCount",0)}get progress(){return y(()=>this.calculateProgress())}calculateProgress(){const e=this.apiCalls.value;if(!this._progressDirty&&this._progressLastCount===e.length&&this._progressCache)return this._progressCache;const r=performance.now();if(e.length===0)return this._progressCache={trialId:this.currentTrialId.value||"",total:0,completed:0,failed:0,cancelled:0,pending:0,running:0,lastUpdated:new Date},this._progressDirty=!1,this._progressLastCount=0,this._progressCache;let i=0,a=0,d=0,l=0,n=0;`${e.length}`,this._progressDirty;for(const f of e)switch(f.status){case"completed":i++;break;case"failed":a++;break;case"cancelled":d++;break;case"pending":l++;break;case"running":n++;break}const m=performance.now();return this._progressCache={trialId:this.currentTrialId.value||"",total:e.length,completed:i,failed:a,cancelled:d,pending:l,running:n,lastUpdated:new Date},this._progressDirty=!1,this._progressLastCount=e.length,`${(m-r).toFixed(1)}${i}${e.length}${n}${l}`,this._progressCache}updateApiCalls(e){const r=this.apiCalls.value.length,i=e.length;this._progressDirty=!0,this.apiCalls.value=Object.freeze(e),(Math.abs(i-r)>10||i<100)&&`${e.length}${r}`}updateProgress(e){e.type,this.executionProgress.value=e}setStreaming(e){this.isStreaming.value=e}setCurrentTrial(e){this.currentTrialId.value=e,e||this.clear()}setActiveTab(e){this.activeTab.value!==e&&(`${this.activeTab.value}${e}`,this.activeTab.value=e)}clear(){this.apiCalls.value=[],this.executionProgress.value=null,this.isStreaming.value=!1}async refreshFromDatabase(e){try{const r=await v.apiCalls.where("trialId").equals(e).toArray();`${r.length}`,r.sort((i,a)=>{const d=m=>{switch(m){case"running":return 0;case"completed":return 1;case"failed":return 2;case"pending":return 3;default:return 4}},l=d(i.status),n=d(a.status);return l!==n?l-n:i.order-a.order}),this.updateApiCalls(r),this.setCurrentTrial(e)}catch(r){throw t.error("STORE_V4: Failed to refresh from database:",r),r}}}let A=null;function P(){return A||(A=new V),A}typeof window<"u"&&(window.__trialDataStoreV4=()=>A);class D{constructor(){u(this,"subscription",null);u(this,"progressSubscription",null);u(this,"store",P());u(this,"v4Control",b());u(this,"isActive",!1);u(this,"currentTrialId",null)}async startStreaming(e){const r=performance.now();this.cleanupSubscriptions();const i=performance.now();`${(i-r).toFixed(1)}`,this.isActive=!0,`${(i-r).toFixed(1)}`,this.currentTrialId=e,this.store.setCurrentTrial(e),this.store.setStreaming(!0),`${(performance.now()-i).toFixed(1)}`;const d=performance.now();await this.loadHistoricalData(e),`${(performance.now()-d).toFixed(1)}`;const n=performance.now(),m=this.v4Control.getActiveStreams(e);if(`${(performance.now()-n).toFixed(1)}`,!m){const g=await v.trials.get(e);if(g&&g.status==="running"){let s=0;const o=5,c=setInterval(()=>{s++;const p=this.v4Control.getActiveStreams(e);p?(clearInterval(c),this.connectToTrialStream(e,p)):s>=o&&clearInterval(c)},500)}else`${g?.status||"NOT_FOUND"}`;return}this.connectToTrialStream(e,m)}connectToTrialStream(e,r){this.isActive=!0;const i=r.callsSubject||r.sharedCalls$;`${i?.constructor?.name}`,`${i?.constructor?.name}`,this.subscription=i.subscribe({next:a=>{if(a&&a.length>0){const d=performance.now();`${a.length}`,a.forEach(s=>t.info(`PAUSE_RESUME_BUG: - ${s.id} status=${s.status}`)),`${a.length}`;const l=this.store.apiCalls.value,n=new Map;for(const s of l)n.set(s.id,s);let m=!1;for(const s of a){const o=n.get(s.id);o&&o.status!==s.status?m=!0:o||(m=!0),n.set(s.id,s)}let f;if(m)`${n.size}`,f=Array.from(n.values()).sort((s,o)=>{const c=h=>{switch(h){case"running":return 0;case"completed":return 1;case"failed":return 2;case"pending":return 3;default:return 4}},p=c(s.status),S=c(o.status);if(p!==S)return p-S;if(s.status==="completed"&&o.status==="completed"){const h=s.completed?new Date(s.completed).getTime():0;return(o.completed?new Date(o.completed).getTime():0)-h}if(s.status==="running"&&o.status==="running"){const h=s.started?new Date(s.started).getTime():0;return(o.started?new Date(o.started).getTime():0)-h}return s.order-o.order});else{`${a.length}`;const s=[];for(const o of l){const c=n.get(o.id);c?(s.push(c),n.delete(o.id)):s.push(o)}for(const o of n.values())s.push(o);f=s}`${(performance.now()-d).toFixed(1)}${l.length}`,this.store.updateApiCalls(f)}},error:a=>{t.error("V4_STREAM_CONNECT: Stream error:",a),this.store.setStreaming(!1),this.isActive=!1},complete:()=>{this.store.setStreaming(!1),this.isActive=!1,this.loadHistoricalData(e)}}),r.sharedProgress$&&(r.sharedProgress$,this.progressSubscription=r.sharedProgress$.subscribe({next:a=>{a.type,`${a.type}`,`${a.type}${new Date().toISOString()}`,a.type==="completed"&&this.loadHistoricalData(e).then(()=>{}).catch(d=>{t.error("V4_TRIAL_COMPLETION: Failed to load final data:",d)}),this.store.updateProgress(a)},error:a=>{t.error("V4_STREAM_CONNECT: Progress stream error:",a)}}))}cleanupSubscriptions(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null),this.progressSubscription&&(this.progressSubscription.unsubscribe(),this.progressSubscription=null),this.store.setStreaming(!1)}stopStreaming(){`${this.currentTrialId}`,`${this.isActive}`,this.cleanupSubscriptions(),this.isActive=!1}async loadHistoricalData(e){const r=performance.now();try{`${(performance.now()-r).toFixed(1)}`,`${(performance.now()-r).toFixed(1)}`;const d=performance.now();`${(d-r).toFixed(1)}`;const l=await v.apiCalls.where("trialId").equals(e).toArray(),n=performance.now();`${l.length}${(n-d).toFixed(1)}`,`${(n-r).toFixed(1)}`;const m=performance.now();l.sort((c,p)=>{const S=_=>{switch(_){case"running":return 0;case"completed":return 1;case"failed":return 2;case"pending":return 3;default:return 4}},h=S(c.status),w=S(p.status);if(h!==w)return h-w;if(c.status==="completed"&&p.status==="completed"){const _=c.completed?new Date(c.completed).getTime():0;return(p.completed?new Date(p.completed).getTime():0)-_}if(c.status==="running"&&p.status==="running"){const _=c.started?new Date(c.started).getTime():0;return(p.started?new Date(p.started).getTime():0)-_}return c.order-p.order});const f=performance.now();`${l.length}${(f-m).toFixed(1)}`;const g=performance.now();this.store.updateApiCalls(l),this.store.setStreaming(!1),`${(performance.now()-g).toFixed(1)}`,`${this.isActive}`,`${(performance.now()-r).toFixed(1)}`}catch(i){t.error("STREAM_MGR_V4: Failed to load historical data:",i),this.store.clear()}}destroy(){this.stopStreaming(),this.currentTrialId=null,this.store.clear()}}let E=null;function O(){return E||(E=new D),E}typeof window<"u"&&(window.__trialStreamManagerV4=()=>E);const F=Object.freeze(Object.defineProperty({__proto__:null,useTrialStreamManagerV4:O},Symbol.toStringTag,{value:"Module"}));export{O as a,F as t,P as u};

const t=new class{async getStorageInfo(){const t=await this.calculateStorageBreakdown(),e=t.localStorage+t.indexedDB+t.sessionStorage;let a=0,o=0;if("storage"in navigator&&"estimate"in navigator.storage)try{const t=await navigator.storage.estimate();a=t.quota||0,o=a-(t.usage||e)}catch(r){console.warn("Could not get storage estimate:",r)}0===a&&(a=this.estimateQuota(),o=a-e);const{value:s,unit:n}=this.formatBytes(e);return{total:a,used:e,available:Math.max(0,o),unit:n,formatted:`${s} ${n}`,breakdown:t}}async calculateStorageBreakdown(){const t=this.calculateLocalStorageSize(),e=this.calculateSessionStorageSize();return{localStorage:t,indexedDB:await this.calculateIndexedDBSize(),sessionStorage:e}}calculateLocalStorageSize(){let t=0;try{for(let e in localStorage)localStorage.hasOwnProperty(e)&&(t+=localStorage[e].length+e.length)}catch(e){console.warn("Could not calculate localStorage size:",e)}return 2*t}calculateSessionStorageSize(){let t=0;try{for(let e in sessionStorage)sessionStorage.hasOwnProperty(e)&&(t+=sessionStorage[e].length+e.length)}catch(e){console.warn("Could not calculate sessionStorage size:",e)}return 2*t}async calculateIndexedDBSize(){if("storage"in navigator&&"estimate"in navigator.storage)try{const t=await navigator.storage.estimate();if(t.usageDetails&&t.usageDetails.indexedDB)return t.usageDetails.indexedDB}catch(t){console.warn("Could not get IndexedDB size from storage API:",t)}return this.estimateIndexedDBSize()}estimateIndexedDBSize(){try{const t=JSON.stringify(localStorage.getItem("designs")||"[]"),e=JSON.stringify(localStorage.getItem("variableLists")||"[]"),a=JSON.stringify(localStorage.getItem("trials")||"[]"),o=JSON.stringify(localStorage.getItem("settings")||"{}");return 2*(t.length+e.length+a.length+o.length)}catch(t){return console.warn("Could not estimate IndexedDB size:",t),0}}estimateQuota(){const t=navigator.userAgent.toLowerCase();return t.includes("chrome")||t.includes("edge")?1073741824:t.includes("firefox")?536870912:(t.includes("safari"),268435456)}formatBytes(t){if(0===t)return{value:"0",unit:"B"};const e=Math.floor(Math.log(t)/Math.log(1024));return{value:(t/Math.pow(1024,e)).toFixed(0===e?0:1),unit:["B","KB","MB","GB"][e]||"GB"}}async getStoragePercentage(){const t=await this.getStorageInfo();return 0===t.total?0:Math.round(t.used/t.total*100)}};export{t as s};

import{i as e,e as a}from"./index-HyoKRhI9.js";import{ag as t,f as r,c as n}from"./vendor-DCf9YP3r.js";import{l as o}from"./db-CL8uhZCz.js";import{l as i}from"./logger.service-_k__GSpu.js";const s=t("settings",()=>{const t=r(!0),s=r({}),c=r({}),l=r({}),u=r("light"),d=r(!1),p=r({delay:50,errorRate:0,refusalRate:0});let m=null;const v=e=>{const a={openai:["openai-chat","openai-responses"],anthropic:["anthropic"],ollama:["ollama-chat","ollama-generate"],openrouter:["openrouter"]};if(s.value[e])return s.value[e];for(const[t,r]of Object.entries(a))if(r.includes(e)&&s.value[t])return s.value[t]},g=n(()=>Object.keys(s.value).length>0),y=r({"openai-chat":{enabled:!0},"openai-responses":{enabled:!0},anthropic:{enabled:!0},"ollama-chat":{enabled:!0},"ollama-generate":{enabled:!0},openrouter:{enabled:!0}}),b=n(()=>Object.entries(y.value).filter(([e,a])=>a.enabled).map(([e])=>e)),f=n(()=>[{id:"openai",name:"OpenAI",providers:["openai-chat","openai-responses"]},{id:"anthropic",name:"Anthropic",providers:["anthropic"]},{id:"ollama",name:"Ollama",providers:["ollama-chat","ollama-generate"]},{id:"openrouter",name:"OpenRouter",providers:["openrouter"]}].map(e=>({...e,hasKey:!!s.value[e.id]})));return async function(){await e.open();let a=await e.settings.get("main");a||(a={id:"main",apiKeys:{},customBaseUrls:{}},await e.settings.put(a)),s.value=a.apiKeys||{},c.value=a.customBaseUrls||{},l.value=a.providerConcurrency||{},u.value=a.theme||"light",d.value=a.mockMode||!1,p.value=a.mockSettings||{delay:50,errorRate:0,refusalRate:0},m=o(()=>e.settings.get("main")).subscribe({next:e=>{e&&(s.value=e.apiKeys||{},c.value=e.customBaseUrls||{},l.value=e.providerConcurrency||{},u.value=e.theme||"light",d.value=e.mockMode||!1,p.value=e.mockSettings||{delay:50,errorRate:0,refusalRate:0}),t.value=!1},error:e=>{i.error("Settings subscription error",e),t.value=!1}})}(),{isLoading:t,providers:y,mockMode:d,mockSettings:p,enabledProviders:b,hasAnyApiKeys:g,apiKeyGroups:f,getApiKey:v,setApiKey:async function(a,t){const r=await e.settings.get("main");if(!r)return;const n={...r.apiKeys};t?n[a]=t:delete n[a],await e.settings.update("main",{apiKeys:n})},getBaseUrl:e=>c.value[e],setBaseUrl:async function(a,t){const r=await e.settings.get("main");if(!r)return;const n={...r.customBaseUrls};t?n[a]=t:delete n[a],await e.settings.update("main",{customBaseUrls:n})},getProviderConcurrency:e=>l.value[e],isProviderEnabled:e=>y.value[e]?.enabled??!1,setProviderEnabled:(e,a)=>{y.value[e]?y.value[e].enabled=a:y.value[e]={enabled:a}},hasApiKey:e=>!!v(e),setTheme:async function(a){await e.settings.update("main",{theme:a})},setProviderConcurrency:async function(a,t){const r=await e.settings.get("main"),n={...r?.providerConcurrency||{}};t>0&&t<=64?n[a]=t:delete n[a],await e.settings.update("main",{providerConcurrency:n})},setMockMode:async function(t){await e.settings.update("main",{mockMode:t});const{MockProviderService:r}=await a(async()=>{const{MockProviderService:e}=await import("./mock-provider.service-BAPeV6CB.js");return{MockProviderService:e}},[],import.meta.url);r.setMockMode({enabled:t,...p.value})},setMockSettings:async function(t){const r={...p.value,...t};if(await e.settings.update("main",{mockSettings:r}),d.value){const{MockProviderService:e}=await a(async()=>{const{MockProviderService:e}=await import("./mock-provider.service-BAPeV6CB.js");return{MockProviderService:e}},[],import.meta.url);e.setMockMode({enabled:!0,...r})}},cleanup:function(){m?.unsubscribe()}}});export{s as u};

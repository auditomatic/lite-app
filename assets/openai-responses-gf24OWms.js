const e="openai-responses",t="OpenAI Responses",o={baseUrl:"https://api.openai.com",endpoints:{chat:"/v1/responses"}},n={type:"bearer",header:"Authorization",envVar:"OPENAI_API_KEY"},r={defaultConcurrency:6,maxConcurrency:64,description:"OpenAI Responses API - different limits than chat completions"},i={"Content-Type":"application/json"},s=[{pattern:"^o[0-9]",name:"O-Series (Reasoning Models)",params:{max_output_tokens:{type:"integer",description:"Maximum tokens for completion including reasoning",min:1,default:512,basic:!0,is_output_length:!0},reasoning:{type:"object",description:"Reasoning configuration",basic:!0,properties:{effort:{type:"string",enum:["low","medium","high"]}}}}},{pattern:"^gpt",name:"GPT Models",params:{temperature:{type:"number",description:"Sampling temperature",min:0,max:2,default:0,basic:!0},max_output_tokens:{type:"integer",description:"Maximum tokens for completion",min:1,default:128,basic:!0,is_output_length:!0},top_p:{type:"number",description:"Nucleus sampling threshold",min:0,max:1,basic:!1},top_logprobs:{type:"integer",description:"Number of top log probabilities",min:0,max:20,basic:!1},text:{type:"object",description:"Text format configuration",basic:!1,properties:{format:{type:"object",properties:{type:{type:"string",enum:["text","json_schema","json_object"]}}}}},store:{type:"boolean",description:"Store response for later retrieval",default:!0,basic:!1},tools:{type:"array",description:"Functions the model can call",basic:!1},tool_choice:{type:"string",description:"Controls function calling behavior",enum:["auto","required","none"],basic:!1},parallel_tool_calls:{type:"boolean",description:"Allow calling multiple functions in one turn",default:!0,basic:!1}}}],a={text:{id:"text",label:"Text",description:"Standard text response",parameters:{},responseTransform:{contentPath:"output[1].content[0].text",fallbackPaths:["output[0].content[0].text","output[0].content","text"],errorPath:"error.message"}},function_calling:{id:"function_calling",label:"Function Calling",description:"Call functions with structured parameters",parameters:{tools:[{type:"function",name:"provide_answer",description:"Provides the answer to the question",parameters:{type:"object",properties:{answer:{type:"string",description:"The answer value"}},required:["answer"],additionalProperties:!1},strict:!0}],tool_choice:"required"},responseTransform:{contentPath:"output[0].arguments",fallbackPaths:["output[0].content[0].text","output[0]"],errorPath:"error.message",isJSON:!0}}},p={promptKey:"input",wrapPrompt:!1},c={id:e,name:t,api:o,auth:n,execution:r,headers:i,modelRules:s,responseModes:a,requestTransform:p};export{o as api,n as auth,c as default,r as execution,i as headers,e as id,s as modelRules,t as name,p as requestTransform,a as responseModes};
